{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  //   "prefix": "mytsx2log",
  //   "body": ["console.log('$1');", "$2"],
  //   "description": "Log output to console"
  // },
  "React Readucer": {
    "prefix": "rrreducer",
    "body": [
      "import { ${1:Name}State } from './';",
      "",
      "type ${1:Name}Action = ",
      "    | { type: '${2:actionA}' }",
      "",
      "export const ${1/(.*)/${1:/downcase}/}Reducer = (state: ${1:Name}State, action: ${1:Name}Action): ${1:Name}State => {",
      "    switch (action.type) {",
      "        case '${2:actionA}':",
      "            return {",
      "                ...state,",
      "                showSidemenu: true",
      "            }",
      "        default:",
      "            return state;",
      "    }",
      "}"
    ],
    "description": "React Readucer"
  },
  "mysnippet": {
    "prefix": "mysnippetdowncaseandupercase",
    "body": [
      "const ${1:Name} = () => {",
      "    return (",
      "        <div>",
      "            <h1>${1/(.*)/${1:/downcase}/}</h1>",
      "            <h1>${1:Name}</h1>",
      "        </div>",
      "    )",
      "}",
      "",
      "export default ${1:Name};"
    ]
  },
  "React Provider": {
    "prefix": "rrprovider",
    "body": [
      "import { useReducer } from 'react';",
      "import { ${1:Name}Context, ${1/(.*)/${1:/downcase}/}Reducer } from './';",
      "",
      "export interface ${1:Name}State {",
      "  ${2:propA}: boolean;",
      "}",
      "",
      "const ${1/(.*)/${1:/upcase}/}_INITIAL_STATE: ${1:Name}State = {",
      "  ${2:propA}: false,",
      "};",
      "",
      "interface ${1:Name}ProviderProps {",
      "  children: React.ReactNode;",
      "}",
      "",
      "export const ${1:Name}Provider: React.FC<${1:Name}ProviderProps> = ({ children }) => {",
      "  const [state, dispatch] = useReducer(${1/(.*)/${1:/downcase}/}Reducer, ${1/(.*)/${1:/upcase}/}_INITIAL_STATE);",
      "",
      "  const dispatchA = () => dispatch({ type: 'ACTION_A' });",
      "",
      "  return (",
      "    <${1:Name}Context.Provider value={{ ...state, dispatchA }}>",
      "      {children}",
      "    </${1:Name}Context.Provider>",
      "  );",
      "};",
      ""
    ],
    "description": "React Provider"
  },
  "React Context": {
    "prefix": "rrcontext",
    "body": [
      "import {createContext} from 'react';",
      "",
      "interface ${1:Name}ContextProps {",
      "    propA: boolean;",
      "    accionA: () => void;",
      "}",
      "",
      "export const ${1:Name}Context = createContext({} as ${1:Name}ContextProps);"
    ],
    "description": "React Context"
  },
  "React Index": {
    "prefix": "rrindex",
    "body": [
      "import { useContext } from 'react'",
      "import { ${1:Name}Context } from './${1:Name}Context'",
      "",
      "export * from './${1:Name}Context'",
      "export * from './${1:Name}Provider'",
      "export * from './${1/(.*)/${1:/downcase}/}Reducer'",
      "",
      "export const use${1:Name} = () => {",
      "    const context = useContext(${1:Name}Context)",
      "    if (context === undefined) {",
      "        throw new Error('use${1:Name} must be used within a ${1:Name}Provider')",
      "    }",
      "    return context",
      "}"
    ],
    "description": "React Index"
  },
  "React Context Main": {
    "prefix": "rrmain",
    "body": [
      "import { createContext, useContext, useReducer } from 'react';",
      "",
      "",
      "// import {createContext} from 'react';",
      "",
      "interface ${1:Name}ContextProps {",
      "    ${3:propA}: boolean;",
      "    ${9:dispatcherA}: () => void;",
      "}",
      "",
      "export const ${1:Name}Context = createContext({} as ${1:Name}ContextProps);",
      "",
      "",
      "",
      "",
      "",
      "",
      "// import { useReducer } from 'react';",
      "// import { ${1:Name}Context, ${1/(.*)/${1:/downcase}/}Reducer } from './';",
      "",
      "export interface ${1:Name}State {",
      "  ${3:propA}: boolean;",
      "}",
      "",
      "const ${1/(.*)/${1:/upcase}/}_INITIAL_STATE: ${1:Name}State = {",
      "  ${3:propA}: false,",
      "};",
      "",
      "interface ${1:Name}ProviderProps {",
      "  children: React.ReactNode;",
      "}",
      "",
      "export const ${1:Name}Provider: React.FC<${1:Name}ProviderProps> = ({ children }) => {",
      "  const [state, dispatch] = useReducer(${1/(.*)/${1:/downcase}/}Reducer, ${1/(.*)/${1:/upcase}/}_INITIAL_STATE);",
      "",
      "  const ${9:dispatcherA} = () => dispatch({ type: '${6:actionA}' });",
      "",
      "  return (",
      "    <${1:Name}Context.Provider value={{ ...state, ${9:dispatcherA} }}>",
      "      {children}",
      "    </${1:Name}Context.Provider>",
      "  );",
      "};",
      "",
      "",
      "",
      "",
      "// import { ${1:Name}State } from './';",
      "",
      "type ${1:Name}Action = ",
      "    | { type: '${6:actionA}' }",
      "",
      "export const ${1/(.*)/${1:/downcase}/}Reducer = (state: ${1:Name}State, action: ${1:Name}Action): ${1:Name}State => {",
      "    switch (action.type) {",
      "        case '${6:actionA}':",
      "            return {",
      "                ...state,",
      "                ${3:propA}: true",
      "            }",
      "        default:",
      "            return state;",
      "    }",
      "}",
      "",
      "",
      "",
      "",
      "// import { useContext } from 'react'",
      "// import { ${1:Name}Context } from './${1:Name}Context'",
      "",
      "// export * from './${1:Name}Context'",
      "// export * from './${1:Name}Provider'",
      "// export * from './${1/(.*)/${1:/downcase}/}Reducer'",
      "",
      "",
      "export const use${1:Name} = () => {",
      "    const context = useContext(${1:Name}Context)",
      "    if (context === undefined) {",
      "        throw new Error('use${1:Name} must be used within a ${1:Name}Provider')",
      "    }",
      "    return context",
      "}",
      "",
      ""
    ]
  }
}
